


:height 16 ; :width 32 ; 														// screen dimensions.

:__cursor $variable ; 															// current cursor position.

:home 0 __cursor ! ; 															// home cursor 

:__fillcopy over over 1 $hwio 2 $hwio 											// tail recursive screen fill.
					dup height width * = #0if exit 1+ $loop  

:fillscreen 0 __fillcopy drop drop home ;  										// clear screen with character (fill - )
							
:clearScreen 32 fillscreen ; 													// clear screen ( - )						
	
:cursor width * + __cursor ! ;													// cursor position (x y -)

:__recol swap 127 and or ;														// recolour character (chcl - chcl)

:red 256 __recol ; :green 512 __recol ; :yellow 768 __recol ; 					// set character colours (ch - chcl)
:blue 1024 __recol ; :magenta 1280 __recol :cyan 1536 __recol ; 
:white 1792 __recol ;

:__setVisibleCursor  __cursor @ 1 $hwio 2 $hwio ; 								// Draw cursor in given colour (chcl -)


:__checkOff __cursor @ width height * >= #0if clearscreen ;						// Check if wrap needed.

:__printReturn 																	// Print return (return - )
	r> drop __cursor @  width + $FFFF width - 1+ and __cursor ! __checkOff ;

:__printBackspace																// Print backspace (backspace - )
	r> drop __cursor @ width 1- and 0= #0if exit 								// abandon if can't back space
	-1 __cursor +! ;

:__printControl r> drop 														// Handle control keys (key - )
	31 and 
	dup 13 = #0if __printReturn
	dup 8 = #0if __printBackspace
	dup 12 = #0if clearscreen
	drop ;

:printChar																		// Print character supports bs/cr (chcl -)
	dup 127 and 32 < #0if __printControl 										// If control, print them.
	__cursor @ 1 $hwio 2 $hwio 1 __cursor +! __checkOff ; 						// write character out and advance.
;

:getkey 0 $hwio dup #0if exit drop $loop ;										// get a keystroke ( - key)

:getkeyWithCursor $5FF __setVisibleCursor getkey $720 __setVisibleCursor ;		// Get key with cursor display

:echo getkeyWithCursor yellow printChar $loop ;

:__main clearscreen 0 12 cursor echo ;

__stop ;
