//
//		Video I/O and input.
//

: width 32 ;												// screen size
: height 16 ;
: editarea 4 ;												// bottom editing area

: colour_execute $300 ;										// semantic colours
: colour_compile $200 ;
: colour_comment $700 ;
: colour_define  $100 ;

: _buffer $variable alloc 130 								// input buffer, word data
: _cursor $variable ;										// cursor position on screen
: _colour $variable ;										// print colour on screen

: screen! 1 $hwio 2 $hwio ; 								// Write to screen (chcl addr -)

: home 0 _cursor ! ;										// Position Cursor
: cursor width * + _cursor ! ;

: red 1 _colour ! ; : green 2 _colour ! ; 					// Set write colour
: yellow 3 _colour ! ; : blue 4 _colour ! ; 
: magenta 5 _colour ! ; : cyan 6 _colour ! ; : white 7 _colour ! ;

: __fillScreenToEnd over over screen! 						// Fill screen to bottom (charcol start -)
			1+ dup width height * = if 2drop ; self ;					

: clearScreen $720 0  __fillScreenToEnd  home ;				// Clear screen home cursor

: __scrollCheck height editarea - width * _cursor @ <= 		// Handle scrolling off the bottom, clears and back to top.
											if clearScreen then ;

: __backspace _cursor @ width 1- and if -1 _cursor +! then ; // output backspace

: emit 255 and  											// Emit to screen
	dup 8 = if drop __backspace __scrollCheck ;
	dup 13 = if drop _cursor @ width + width 0- and _cursor ! __scrollCheck ;
	_colour @ 16* 16* or _cursor @ screen! 1 _cursor +! __scrollCheck ;

: cr 13 emit ;												// Carriage return

: key 0 $hwio dup 0# if ;  drop self 						// Read keystroke ( - key)

: okPrompt _colour @ cyan 79 emit 107 emit _colour ! ;

//
//	Buffered area at bottom of screen input with coloured text.
//

: _iPointer $variable ;										// pointer into buffer

: __getLastColour _iPointer @ 0= if colour_execute ; then 	// get colour of last character,execute if first
							_iPointer @ 1- 4* _buffer + @ $FF00 and ;

: __backspace _iPointer @ 0> if -1 _iPointer +! then ;		// handle backspace

: __writeAtCursor height editarea - width * 				// write character at cursor pposition
									_iPointer @ + screen! ;

: !buffer _iPointer @  4* _buffer + ! ;						// write to buffer at current position.

: __input $57F __writeAtCursor key $720 __writeAtCursor 
	dup 13 = if drop 0 !buffer ; then 						// CR
	dup 8 = if drop __backspace self then 					// BS
	dup __getLastColour or
	over 4 = if drop colour_define 32 + then 				// Ctrl + D
	over 3 = if drop colour_compile 32 + then 				// Ctrl + C
	over 5 = if drop colour_execute 32 + then				// Ctrl + E
	over 18 = if drop colour_comment 32 + then 				// Ctrl + R
	swap drop dup !buffer __writeAtCursor 1 _iPointer +! 
	_iPointer @ width editarea * = if -1 _iPointer +! then 
	self
;

: inputBuffered 0 _iPointer ! $720 height editArea - width * __fillScreenToEnd __input _buffer ;
