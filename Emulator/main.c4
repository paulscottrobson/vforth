
: $source $variable 0 													// address of input line.
: $type $variable 0 													// type (colourchar masked with $FF00)

: __fetch $source @ @ wordsize $source +! ;
: __undoFetch wordSize 0- $source +! ;

: __doHeaderLink here @ dup head @ - , head ! ;							// compile link back to previous head, update head
: __bit31 $20000000 4* ; 												// cannot do $80000000 inline in VM.

: __shiftCharacterIn 
	over @ $FF000000 and if 											// space for it in this word ?
		over __bit31 swap +! swap wordsize + 0 over ! swap 				// if not, set MSB and go to next word clearing it
	then 
	over @ 16* 16* + over !												// (addr data - addr) shift into word
;

: __getCharacter 														// (addr of first word - addr of last word)
	__fetch 127 and dup $20 <= if drop __undoFetch ; 					// get character, if control or space exit out.
	__shiftCharacterIn self

: __getWord																//  (firstword - lastword )
	0 over ! __getCharacter ;

: __cload																//	( - ok )
	__fetch dup $7F and $20 = if drop self then 						// skip spaces
	dup 0= if drop 1 ; then 											// exit if zero, return 1
	__undoFetch 														// unpick fetch as got something	
	$FF00 and dup colour_define = if __doHeaderLink then 				// isolate the colour. If define build the link back word	
	here @ __getWord 													// Construct the compressed word at HERE.
	swap 																// stack now (endOfWord colour)
	dup colour_define = if over wordsize + here ! then 					// if definition word update HERE
	dup colour_execute = if $__stop then 								// find it, execute it not found try as constant.
	dup colour_compile = if $__stop then								// execute compiler word, find defined word, constant.
																		// comments (colour_comment) do nothing at all
	drop drop self 														// throw away endOfWord and colour and re-enter.
;

: cload $source ! __cload ;

: test  $variable %1test %1intelligence    alloc 1

: __main $__init_utility 
	clearScreen 16 base !
	here @ -1 test cload . . . here @ .
	 $__stop ;

